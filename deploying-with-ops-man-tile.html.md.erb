---
title: Deploying Your Product as a Tile in Ops Manager
---

## What’s inside a Tile?

A tile is an archived directory with a `.pivotal` file extension, containing the following subdirectories:

<ul>
    <li>Content_migrations <strong>(optional)</strong>: Migrations for when an earlier version is upgraded.</li>
    <li>Metadata <strong>(required)</strong>: The guts of the tile, including forms, manifest generation, and dependencies.</li>
    <li>Releases <strong>(optional)</strong>: Source code for the releases of the software product.</li>
</ul>

This topic describes the procedure for deploying a Cloud Foundry software product as a tile to Ops Manager. Before attempting this, you should confirm that your product can be successfully deployed by BOSH, as described in [Deploying Your Product with BOSH](./deploying-with-bosh.html).

Since your tile will run in Ops Manager you should start by deploying an Ops Manager to your IaaS. Follow the instructions on the PCF documentation site to get an Ops Manager up and running.

## <a id='create-manifest'></a>Step 1: Create a Product Manifest Template

SSH into the Ops Manager Virtual Machine. `cd` into the metadata directory.

<pre class='terminal'>$cd /var/tempest/workspaces/default/metadata</pre>

Create a product template file named `redis-9.1.yml` with the following content. This is the bare minimum for a valid manifest template.

```
---
name: redis
metadata_version: '1.5'
product_version: 9.1.0.0
rank: 10
```

Refresh the Ops Manager Installation Dashboard. The list of **Available Products** should include a new product with no name:


## <a id='add-label-and-image'></a>Step 2: Add a Label and Image to your Tile

Modify the product template to include a label:

```
---
name: redis
metadata_version: '1.5'
product_version: 9.1.0.0
rank: 10
label: Redis Community Edition
```

Refresh the installation Dashboard.
The new product, now with a label, appears in the **Available Products** list.
Hover over the Redis product and click Add to add to the Dashboard. A blank product tile with neither image nor label appears.




Add a base64 encoded image to the product template. The image in the example is a 1x1 transparent gif.

```
---
name: redis
metadata_version: '1.5'
product_version: 9.1.0.0
rank: 50
label: Redis Community Edition
icon_image: R0lGODlhAQABAAAAACH5BAEAAAAALAAAAAABAAEAAAI=
```

Refresh the Ops Manager Dashboard. The product tile now appears with its label and (transparent) image.



(Optional) Experiment with other images. The recommended size is 128x128.

## <a id='add-release'></a>Step 3: Add the Software Release to Your Tile

Change directories to the releases directory

$cd /var/tempest/releases

Download the Redis release


$ sudo wget https://bosh.io/d/github.com/cloudfoundry-community/redis-boshrelease?v=9.1 -O redis-9.1.tgz

Get the MD5 of the release


<pre class='terminal'>
$ md5sum redis-9.1.tgz
06183ee91241771100f732e43554b68c  redis-9.1.tgz
</pre>

Re-open the product manifest template file in vim.tiny


`$vim.tiny /var/tempest/workspaces/default/metadata/redis-9.1.yml`


Add a reference to the Redis release

```
---	
name: redis
metadata_version: '1.5'
product_version: 9.1.0.0
rank: 50
label: Redis Community Edition
icon_image: R0lGODlhAQABAAAAACH5BAEAAAAALAAAAAABAAEAAAI=
releases:
- file: redis-9.1.tgz
  name: redis
  version: '9.1' 
  md5: 06183ee91241771100f732e43554b68c
```	
## <a id='add-stemcell'></a>Step 4: Add a Stemcell to Your Tile

Find the stemcell that was bundled inside of this version of Ops Manager by running
<pre class='terminal'>
$ ls /var/tempest/stemcells/
bosh-stemcell-2968-vsphere-esxi-ubuntu-trusty-go_agent.tgz
</pre>	

Run `$vim.tiny /var/tempest/workspaces/default/metadata/redis-9.1.yml` to open your product manifest template.

Add a reference to the stemcell:


```
---
name: redis
metadata_version: '1.5'
product_version: 9.1.0.0
rank: 50
label: Redis Community Edition
icon_image: R0lGODlhAQABAAAAACH5BAEAAAAALAAAAAABAAEAAAI=
stemcell_criteria:
  os: ubuntu-trusty
  version: '2968'
  requires_cpi: false
releases:
- file: redis-9.1.tgz
  name: redis
  version: '9.1'
  md5: 06183ee91241771100f732e43554b68c
```

## <a id='rebuild-tile'></a>Step 5: Rebuild Your Tile with the Release and Stemcell

Return to the Ops Manager Dashboard and delete the Redis Tile using the Garbage can in the corner.
Configure the Ops Manager Director Tile with proper network and availability zones.
Re-Add the Redis product. This will attach the right stemcell and automatically assign it to the right network and availability zone. 

## <a id='add-job-types'></a>Step 6: Add Job-types to your Product Manifest Template

Jobs are the roles that vms plays in a deployment of your product.

Add a `job_types` section and include job definitions and resource sizing for redis-master, redis-slave, and compilation workers.

Notice we are also setting the VM password using the `property_blueprint` key. This is a required key for every VM except compilation workers and errands.


```
---
name: redis
metadata_version: '1.5'
product_version: 9.1.0.0.0.0
rank: 50
label: Redis Community Edition
icon_image: R0lGODlhAQABAAAAACH5BAEAAAAALAAAAAABAAEAAAI=
stemcell_criteria:
  os: ubuntu-trusty
  version: '2968'
  requires_cpi: false
releases:
- file: redis-9.1.tgz
  name: redis
  version: '9.1' 
  md5: 06183ee91241771100f732e43554b68c
job_types:
- name: redis-master
  label: redis-master
  resource_label: redis-master
  description: The redis master node
  templates:
  - name: redis
    release: redis
  max_in_flight: 1
  dynamic_ip: 0
  static_ip: 1
  instance_definitions:
  - name: instances
    type: integer
    label: Instances
    default: 1
    configurable: true
    constraints:
      min: 1
  resource_definitions:
  - name: ram
    label: RAM
    type: integer
    configurable: true
    default: 1024
    constraints:
      min: 1024
  - name: ephemeral_disk
    type: integer
    label: Ephemeral Disk
    configurable: true
    default: 2048
    constraints:
      min: 1024
  - name: persistent_disk
    type: integer
    configurable: true
    default: 10240
    constraints:
      min: 4096
  - name: cpu
    type: integer
    label: CPU
    configurable: true
    default: 1
    constraints:
      min: 1
      power_of_two: true
  property_blueprints:
  - name: vm_credentials
    type: salted_credentials
    label: VM credentials
    default:
      identity: vcap
- name: redis-slave
  label: redis-slave
  resource_label: redis-slave
  description: The redis slave node
  templates:
  - name: redis
    release: redis
  max_in_flight: 1
  dynamic_ip: 0
  static_ip: 1
  instance_definitions:
  - name: instances
    type: integer
    label: Instances
    default: 1
    configurable: true
    constraints:
      min: 1
  resource_definitions:
  - name: ram
    label: RAM
    type: integer
    configurable: true
    default: 1024
    constraints:
      min: 1024
  - name: ephemeral_disk
    type: integer
    label: Ephemeral Disk
    configurable: true
    default: 2048
    constraints:
      min: 1024
  - name: persistent_disk
    type: integer
    configurable: true
    default: 10240
    constraints:
      min: 4096
  - name: cpu
    type: integer
    label: CPU
    configurable: true
    default: 1
    constraints:
      min: 1
      power_of_two: true
  property_blueprints:
  - name: vm_credentials
    type: salted_credentials
    label: VM credentials
    default:
      identity: vcap
- name: compilation
  label: Compilation
  resource_label: Compilation
  description: Compilation
  static_ip: 0
  dynamic_ip: 1
  instance_definitions:
  - name: instances
    type: integer
    label: Instances
    default: 4
    configurable: true
    constraints:
      min: 1
  max_in_flight: 1
  resource_definitions:
  - name: ram
    type: integer
    label: RAM
    configurable: true
    default: 1024
    constraints:
      min: 1024
  - name: ephemeral_disk
    type: integer
    label: Ephemeral Disk
    configurable: true
    default: 20480
    constraints:
      min: 20480
  - name: persistent_disk
    type: integer
    label: Persistent Disk
    configurable: false
    default: 0
  - name: cpu
    type: integer
    label: CPU
    configurable: true
    default: 2
    constraints:
      min: 1
      power_of_two: true
```

From the **Ops Manager Installation Dashboard**, click the **Redis Community Edition** tile and then select **Resource Config**. You will see the resource settings for the jobs you created.



## <a id='reinstall-tile'></a>Step 7: Reinstall the Product Tile

Delete your tile using the trash can icon.  
Re-add your tile and click the Apply Changes button in Ops Manager
Install the Redis product. 

Once the product is installed successfully, set a key in the master node. 
<pre class='terminal'>
nc 10.85.16.92 6379
set lol lol
+OK
</pre>

To find the IPs of the redis servers (10.85.16.92 above), select the Status tab.  This will show you the IPs of redis master and redis slave.

If you attempt to look at the slave node the key will not have replicated. That is because the slave requires a BOSH Manifest setting that points it to the master. To do this, we need to use a manifest snippet, which will be explored in the next section.

```
---
nc 10.85.16.93 6379
get lol
$-1
```

## <a id='add-snippets'></a>Step 8: Add Manifest Snippets to the Manifest Template

Ops Manager creates BOSH manifests dynamically. Since manifests are difficult to construct this is one of Ops Manager’s primary value points. Every time the user hits the Apply button, a new manifest is created and delivered to the Ops Manager Director, which is an instance of MicroBOSH that Ops Manager controls. Ops Manager uses ‘manifest snippets’ to dynamically populate BOSH manifests with the appropriate information.

In our original BOSH manifest, we pointed the Redis slave at the master node as follows:


```
---
- name: redis-slave
...
  properties:
    redis:
      master: 10.85.16.151
```

In our manifest template, we use a manifest snippet to reference the redis master node instead of hard coding its properties. This enables Ops Manager to add these properties to the BOSH manifests it generates.

To allow Ops Manager to reference the IP of the redis master node, add a manifest snippet using the name of the job redis-master and the first_ip accessor.

```
...
property_blueprints:
  - name: vm_credentials
    ...
  manifest: |
    redis:
      master: (( .redis-master.first_ip ))
```

Return to the Ops Manager dashboard and click the Apply Changes button.
Observe that the slave node is now replicating data from the master node.

<pre class='terminal'>
nc 10.85.16.93 6379
get lol
$3
lol
</pre>

 Refer to the Ops Manager Accessor section of [Product Template References](./product-template-reference.html) for a complete list of the accessors.
